---
title: "MigrAnglR"
author: "Pierre Osteil"
date: "26/04/2024"
output: html_document
toc: TRUE
---

# Packages

```{r}
library(tidyverse)
library(ggpubr)
```



# Design of the fonction

This function calculates the angle in degrees between two vectors by taking the dot product of the vectors, dividing it by the product of their magnitudes, and then taking the arccosine of the result. The acros function retunrs  the inverse of the cosine function. It returns the angle in radians whose cosine is the specified value.

Î¸ = cos-1 [ (a. b) / (||a|| * ||b||) ] 

where ||x|| is the magnitude of a vector which is the square root of the sum of the squares of the elements of the vector.

https://www.youtube.com/watch?v=dYPRYO8QhxU

```{r}
angle_between_vectors <- function(v1, v2) {
  dot_product <- sum(v1 * v2)
  magnitude_v1 <- sqrt(sum(v1^2))
  magnitude_v2 <- sqrt(sum(v2^2))
  angle <- acos(dot_product / (magnitude_v1 * magnitude_v2))
  angle_in_degrees <- angle * (180 / pi)
  return(angle_in_degrees)
}

# Example usage
vector1 <- c(3, 4, 5)
vector2 <- c(1, 2, 2)
angle_between_vectors(vector1, vector2)

```

# Data from ImageJ
## open the data file
```{r}
dir <- getwd()
listFiles <- list.files(file.path(dir, "data/"))

# need a for loop opening files.
angleDat <- data.frame()

for (i in 1:length(listFiles)) {
temp <- read.csv(file.path(dir, "data/", listFiles[i]), h= TRUE, sep = ";")
metadata_fileName <- strsplit(listFiles[i], "_")
temp$date <- strsplit(metadata_fileName[[1]][1], " ")[[1]][4]
temp$ID_Embryon <- as.numeric(strsplit(strsplit(metadata_fileName[[1]][4], "-")[[1]][2], ".", fixed = T)[[1]][1])
temp$unique_ID_Embryon <- paste0(temp$date, "_", temp$ID_Embryon) # metadata on embryo name
angleDat <- rbind.data.frame(angleDat, temp)
}
dim(angleDat)
head(angleDat)
```

## metadata on cells that needs to be ompared
```{r}
angleDat_meta <- str_split_fixed(angleDat$Name, pattern = "_", n = 4)
head(angleDat_meta)

colnames(angleDat_meta) <- c("ID_Omero", "CellType", "cellNumber", "CenterName")
angleDat_complete <- cbind.data.frame(angleDat, angleDat_meta)

angleDat_complete$unique_cell_ID <- paste0(angleDat_complete$unique_ID_Embryon, "_", angleDat_complete$cellNumber) # label each cell individually

head(angleDat_complete)
```

# calculate the angle between vectors
from coordinates of 4 points 2 in the TE and 2 in the PE, I will construct a vector for each and calculate the angle.   
```{r}

angleDat_complete_noZT <- angleDat_complete |> filter(CellType != "ZT")

angleTUBG1 <- data.frame( )

for (i in 1:length(angleDat_complete_noZT$unique_cell_ID)) {
    
# loop each cell of each embryo
temp <- angleDat_complete_noZT |> filter(unique_cell_ID == unique_cell_ID[i]) 

# calucate the vector
# TE : N2 - N1
# PE : C - N
TE_vec <- temp |> filter(CenterName == "N2") |> select("X","Y","Z") - 
             temp |> filter(CenterName == "N1") |> select("X","Y","Z") # TE1_N2 - TE1_N1

PE_vec <- temp |> filter(CenterName == "C") |> select("X","Y","Z") - 
             temp |> filter(CenterName == "N") |> select("X","Y","Z") # PE_C - PE_N

# Apply the function to calculate the angle
angle <- angle_between_vectors(TE_vec, PE_vec)

#increment the table
angleTUBG1 <- rbind.data.frame(angleTUBG1, c(angleDat_complete_noZT$unique_cell_ID[i], angle))

}
colnames(angleTUBG1) <- c("unique_cell_ID", "angle")

angleTUBG1 <- angleTUBG1  |> distinct(unique_cell_ID, .keep_all = TRUE)
angleTUBG1
```


# calculate the distance of each cell from the ZT
The distance of the center of the PE cells from the ZT. Will take the PE_N value versus the ZT values

```{r}

ZT_dist <- data.frame()

for (i in 1:length(angleDat_complete_noZT$unique_cell_ID)) {
# select the cells
     temp <- angleDat_complete_noZT|> filter(unique_cell_ID == unique_cell_ID[i]) 
     #select the corresponding embryo ZT point
     temp_ZT <- angleDat_complete |> 
                filter(CellType == "ZT") |> 
                filter(unique_ID_Embryon == paste0(str_split_fixed(angleDat_complete$unique_cell_ID[i], "_", n = 3)[1,1],  
                                                   "_",  
                                                   str_split_fixed(angleDat_complete$unique_cell_ID[i], "_", n = 3)[1,2])) 
     
     ZT_left_vec <- temp |> filter(CenterName == "N") |> select("X","Y","Z") - 
                  temp_ZT |> filter(cellNumber == "left") |> select("X","Y","Z")
     
     ZT_right_vec <- temp |> filter(CenterName == "N") |> select("X","Y","Z") - 
                  temp_ZT |> filter(cellNumber == "right") |> select("X","Y","Z")
     
     # take the smallest distance from ZT left or right 
     ZT_dist_min <- min(sqrt(ZT_left_vec[1]^2 + ZT_left_vec[2]^2 + ZT_left_vec[3]^2), 
                    sqrt(ZT_right_vec[1]^2 + ZT_right_vec[2]^2 + ZT_right_vec[3]^2)) # The euclidean distance from the ZT

ZT_dist <- rbind.data.frame(ZT_dist, c(angleDat_complete_noZT$unique_cell_ID[i], ZT_dist_min))

}

colnames(ZT_dist) <- c("unique_cell_ID", "ZT_dist")
ZT_dist <- ZT_dist  |> distinct(unique_cell_ID, .keep_all = TRUE)
class(ZT_dist$ZT_dist)

head(ZT_dist)

angle_dist_TUBG1 <- merge(angleTUBG1, ZT_dist, by = "unique_cell_ID")
head(angle_dist_TUBG1)
class(angle_dist_TUBG1$angle)
```

# Plot correlation from angel of TUGB1 to distance to ZT_dist


```{r}
angle_dist_TUBG1$angle <- as.numeric(angle_dist_TUBG1$angle)
angle_dist_TUBG1$ZT_dist <- as.numeric(angle_dist_TUBG1$ZT_dist)
angle_dist_TUBG1 <- merge(angle_dist_TUBG1, angleDat_complete, by = "unique_cell_ID")

ggscatter(angle_dist_TUBG1, x = "ZT_dist", y = "angle", color = "unique_ID_Embryon")
ggsave("angle_dist_TUBG1.pdf")


```